// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeIntegralOrderListDao is the data access object for table evente_integral_order_list.
type EventeIntegralOrderListDao struct {
	table   string                         // table is the underlying table name of the DAO.
	group   string                         // group is the database configuration group name of current DAO.
	columns EventeIntegralOrderListColumns // columns contains all the column names of Table for convenient usage.
}

// EventeIntegralOrderListColumns defines and stores column names for table evente_integral_order_list.
type EventeIntegralOrderListColumns struct {
	Id            string // 自增id
	OrgId         string // 主办id
	UserId        string // 用户id
	IntegralId    string // 积分抵现id
	IncrementId   string // 订单id
	Username      string //
	Code          string // 手机区号
	Phone         string // 手机号
	Status        string // 订单状态: 10 待支付 20 已支付 30已发货 40 订单完成 50订单超时 60订单取消 70订单关闭 80 订单异常
	IntegralUsage string // 订单积分使用量
	TotalAmount   string // 抵现总金额
	AmountPayable string // 适用商品应付金额
	DiscountRatio string // 当前订单积分抵现 订单折扣比例快照
	IntegralRatio string // 当前订单积分抵现 积分金额兑换比例
	CreateDate    string //
	UpdateDate    string //
}

// eventeIntegralOrderListColumns holds the columns for table evente_integral_order_list.
var eventeIntegralOrderListColumns = EventeIntegralOrderListColumns{
	Id:            "id",
	OrgId:         "org_id",
	UserId:        "user_id",
	IntegralId:    "integral_id",
	IncrementId:   "increment_id",
	Username:      "username",
	Code:          "code",
	Phone:         "phone",
	Status:        "status",
	IntegralUsage: "integral_usage",
	TotalAmount:   "total_amount",
	AmountPayable: "amount_payable",
	DiscountRatio: "discount_ratio",
	IntegralRatio: "integral_ratio",
	CreateDate:    "create_date",
	UpdateDate:    "update_date",
}

// NewEventeIntegralOrderListDao creates and returns a new DAO object for table data access.
func NewEventeIntegralOrderListDao() *EventeIntegralOrderListDao {
	return &EventeIntegralOrderListDao{
		group:   "default",
		table:   "evente_integral_order_list",
		columns: eventeIntegralOrderListColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeIntegralOrderListDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeIntegralOrderListDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeIntegralOrderListDao) Columns() EventeIntegralOrderListColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeIntegralOrderListDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeIntegralOrderListDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeIntegralOrderListDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
