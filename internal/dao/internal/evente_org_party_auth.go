// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeOrgPartyAuthDao is the data access object for table evente_org_party_auth.
type EventeOrgPartyAuthDao struct {
	table   string                    // table is the underlying table name of the DAO.
	group   string                    // group is the database configuration group name of current DAO.
	columns EventeOrgPartyAuthColumns // columns contains all the column names of Table for convenient usage.
}

// EventeOrgPartyAuthColumns defines and stores column names for table evente_org_party_auth.
type EventeOrgPartyAuthColumns struct {
	Id                     string //
	OrgId                  string // org_id
	AppType                string // app 类型，1:小程序，2:小游戏
	AppState               string // app 状态，0:未发布，1:已发布，2:已下线
	PartyType              string // 第三方工具类型
	NickName               string // 授权方昵称
	UserName               string // 授权方原始ID
	PrincipalName          string // 第三方的主体名称
	HeadImg                string // 授权方头像
	QrcodeUrl              string // 二维码
	AuthorizerAppid        string // app_id
	AuthorizerRefreshToken string //  有效期 1 个月，且只可使用一次，使用后失效。
	FuncInfo               string // 第三方授权给开发者的权限集列表 序列化
	AuthorizerInfo         string // 第三方返回的序列化数据集合
	CreateDate             string // 新增时间
	UpdateDate             string // 更新时间
	DeleteDate             string // 删除时间
	Status                 string // 状态 1:正常 2:取消授权
}

// eventeOrgPartyAuthColumns holds the columns for table evente_org_party_auth.
var eventeOrgPartyAuthColumns = EventeOrgPartyAuthColumns{
	Id:                     "id",
	OrgId:                  "org_id",
	AppType:                "app_type",
	AppState:               "app_state",
	PartyType:              "party_type",
	NickName:               "nick_name",
	UserName:               "user_name",
	PrincipalName:          "principal_name",
	HeadImg:                "head_img",
	QrcodeUrl:              "qrcode_url",
	AuthorizerAppid:        "authorizer_appid",
	AuthorizerRefreshToken: "authorizer_refresh_token",
	FuncInfo:               "func_info",
	AuthorizerInfo:         "authorizer_info",
	CreateDate:             "create_date",
	UpdateDate:             "update_date",
	DeleteDate:             "delete_date",
	Status:                 "status",
}

// NewEventeOrgPartyAuthDao creates and returns a new DAO object for table data access.
func NewEventeOrgPartyAuthDao() *EventeOrgPartyAuthDao {
	return &EventeOrgPartyAuthDao{
		group:   "default",
		table:   "evente_org_party_auth",
		columns: eventeOrgPartyAuthColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeOrgPartyAuthDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeOrgPartyAuthDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeOrgPartyAuthDao) Columns() EventeOrgPartyAuthColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeOrgPartyAuthDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeOrgPartyAuthDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeOrgPartyAuthDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
