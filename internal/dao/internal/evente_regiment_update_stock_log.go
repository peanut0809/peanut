// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeRegimentUpdateStockLogDao is the data access object for table evente_regiment_update_stock_log.
type EventeRegimentUpdateStockLogDao struct {
	table   string                              // table is the underlying table name of the DAO.
	group   string                              // group is the database configuration group name of current DAO.
	columns EventeRegimentUpdateStockLogColumns // columns contains all the column names of Table for convenient usage.
}

// EventeRegimentUpdateStockLogColumns defines and stores column names for table evente_regiment_update_stock_log.
type EventeRegimentUpdateStockLogColumns struct {
	Id               string //
	OrgId            string // 主办id
	UserId           string // 主办id
	RegimentId       string // 团id
	IncrementId      string // 主订单id
	GroupIncrementId string // 团订单id
	ProductId        string // 产品id
	ProductSubId     string // 二级id  例如场次id
	ProductRelId     string // 三级id 例如票品 规格id
	StockId          string // 库存id
	Money            string // 实售价格
	UpdateNum        string // 扣减数量
	IsRollback       string // 是否回滚
	CreateDate       string // 创建时间
	UpdateDate       string // 修改时间
}

// eventeRegimentUpdateStockLogColumns holds the columns for table evente_regiment_update_stock_log.
var eventeRegimentUpdateStockLogColumns = EventeRegimentUpdateStockLogColumns{
	Id:               "id",
	OrgId:            "org_id",
	UserId:           "user_id",
	RegimentId:       "regiment_id",
	IncrementId:      "increment_id",
	GroupIncrementId: "group_increment_id",
	ProductId:        "product_id",
	ProductSubId:     "product_sub_id",
	ProductRelId:     "product_rel_id",
	StockId:          "stock_id",
	Money:            "money",
	UpdateNum:        "update_num",
	IsRollback:       "is_rollback",
	CreateDate:       "create_date",
	UpdateDate:       "update_date",
}

// NewEventeRegimentUpdateStockLogDao creates and returns a new DAO object for table data access.
func NewEventeRegimentUpdateStockLogDao() *EventeRegimentUpdateStockLogDao {
	return &EventeRegimentUpdateStockLogDao{
		group:   "default",
		table:   "evente_regiment_update_stock_log",
		columns: eventeRegimentUpdateStockLogColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeRegimentUpdateStockLogDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeRegimentUpdateStockLogDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeRegimentUpdateStockLogDao) Columns() EventeRegimentUpdateStockLogColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeRegimentUpdateStockLogDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeRegimentUpdateStockLogDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeRegimentUpdateStockLogDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
