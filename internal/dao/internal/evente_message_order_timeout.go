// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeMessageOrderTimeoutDao is the data access object for table evente_message_order_timeout.
type EventeMessageOrderTimeoutDao struct {
	table   string                           // table is the underlying table name of the DAO.
	group   string                           // group is the database configuration group name of current DAO.
	columns EventeMessageOrderTimeoutColumns // columns contains all the column names of Table for convenient usage.
}

// EventeMessageOrderTimeoutColumns defines and stores column names for table evente_message_order_timeout.
type EventeMessageOrderTimeoutColumns struct {
	Id               string //
	OrgId            string // org_id
	IncrementId      string // 交易ID
	Status           string // 状态 1 未处理 2 已支付 3 已超时 4 已发送
	OrderDate        string // 下单时间
	ExpiredDate      string // 即将超时时间
	OrderExpiredDate string // 订单超时时间
	CreateDate       string // 新增时间
	UpdateDate       string // 更新时间
	DeleteDate       string // 删除时间
}

// eventeMessageOrderTimeoutColumns holds the columns for table evente_message_order_timeout.
var eventeMessageOrderTimeoutColumns = EventeMessageOrderTimeoutColumns{
	Id:               "id",
	OrgId:            "org_id",
	IncrementId:      "increment_id",
	Status:           "status",
	OrderDate:        "order_date",
	ExpiredDate:      "expired_date",
	OrderExpiredDate: "order_expired_date",
	CreateDate:       "create_date",
	UpdateDate:       "update_date",
	DeleteDate:       "delete_date",
}

// NewEventeMessageOrderTimeoutDao creates and returns a new DAO object for table data access.
func NewEventeMessageOrderTimeoutDao() *EventeMessageOrderTimeoutDao {
	return &EventeMessageOrderTimeoutDao{
		group:   "default",
		table:   "evente_message_order_timeout",
		columns: eventeMessageOrderTimeoutColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeMessageOrderTimeoutDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeMessageOrderTimeoutDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeMessageOrderTimeoutDao) Columns() EventeMessageOrderTimeoutColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeMessageOrderTimeoutDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeMessageOrderTimeoutDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeMessageOrderTimeoutDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
