// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeVoucherCodeDao is the data access object for table evente_voucher_code.
type EventeVoucherCodeDao struct {
	table   string                   // table is the underlying table name of the DAO.
	group   string                   // group is the database configuration group name of current DAO.
	columns EventeVoucherCodeColumns // columns contains all the column names of Table for convenient usage.
}

// EventeVoucherCodeColumns defines and stores column names for table evente_voucher_code.
type EventeVoucherCodeColumns struct {
	Id                 string //
	OrgId              string // 主办id
	Name               string // 优惠码名称
	VoucherCodeType    string // 优惠码类型 1:一人一码 2:通用吗
	MakeCodeType       string // 生成类型 1:系统生成 2:手动导入 3：手动输入
	Number             string // 发行量
	UseNumber          string // 使用量
	CancelledNumber    string // 作废数量
	VoucherType        string // 优惠类型 1:满减 2:折扣
	UseConditionSwitch string // 是否限制使用条件 0不限制 1限制
	UseCondition       string // 使用条件 订单金额满这个数才可使用
	DiscountPercent    string // 折扣比例
	UseStartTime       string // 优惠码使用开始时间
	UseEndTime         string // 优惠码用结束时间
	EventApplyType     string // 适用活动方式 1全部活动 2指定活动参与 3指定活动不参与
	GoodsApplyType     string // 适用商品方式 1全部商品 2指定商品参与 3指定商品不参与
	ProductyId         string // 活动 商品ID序列化
	FetchLimit         string // 每人领取限额
	Status             string // 1-正常，2-删除,3-手动关闭
	CreateDate         string // 新增时间
	UpdateDate         string // 更新时间
	VoucherCodeSubType string // 区分普通/文惠卡
}

// eventeVoucherCodeColumns holds the columns for table evente_voucher_code.
var eventeVoucherCodeColumns = EventeVoucherCodeColumns{
	Id:                 "id",
	OrgId:              "org_id",
	Name:               "name",
	VoucherCodeType:    "voucher_code_type",
	MakeCodeType:       "make_code_type",
	Number:             "number",
	UseNumber:          "use_number",
	CancelledNumber:    "cancelled_number",
	VoucherType:        "voucher_type",
	UseConditionSwitch: "use_condition_switch",
	UseCondition:       "use_condition",
	DiscountPercent:    "discount_percent",
	UseStartTime:       "use_start_time",
	UseEndTime:         "use_end_time",
	EventApplyType:     "event_apply_type",
	GoodsApplyType:     "goods_apply_type",
	ProductyId:         "producty_id",
	FetchLimit:         "fetch_limit",
	Status:             "status",
	CreateDate:         "create_date",
	UpdateDate:         "update_date",
	VoucherCodeSubType: "voucher_code_sub_type",
}

// NewEventeVoucherCodeDao creates and returns a new DAO object for table data access.
func NewEventeVoucherCodeDao() *EventeVoucherCodeDao {
	return &EventeVoucherCodeDao{
		group:   "default",
		table:   "evente_voucher_code",
		columns: eventeVoucherCodeColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeVoucherCodeDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeVoucherCodeDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeVoucherCodeDao) Columns() EventeVoucherCodeColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeVoucherCodeDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeVoucherCodeDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeVoucherCodeDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
