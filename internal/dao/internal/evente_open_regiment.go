// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeOpenRegimentDao is the data access object for table evente_open_regiment.
type EventeOpenRegimentDao struct {
	table   string                    // table is the underlying table name of the DAO.
	group   string                    // group is the database configuration group name of current DAO.
	columns EventeOpenRegimentColumns // columns contains all the column names of Table for convenient usage.
}

// EventeOpenRegimentColumns defines and stores column names for table evente_open_regiment.
type EventeOpenRegimentColumns struct {
	Id                  string //
	OrgId               string // 主办id
	RegimentId          string // 团id
	UserId              string // 用户id
	ProductType         string // 产品类型（event 票务 goods 商品）
	ProductId           string // 产品id
	GroupIncrementId    string // 团订单号
	SuccessStatus       string // 是否成团 0 - 未成团 1 - 已成团
	RegimentStatus      string // 拼团状态 0 - 拼团中 1 - 拼团成功 2 - 拼团失败
	OfferedNumber       string // 参团人数
	SuccessRegimentType string // 1 - 普通成团 2- 模拟成团
	RegimentNote        string // 成功(失败)备注
	SuccessRegimentDate string //
	CreateDate          string // 创建时间
	UpdateDate          string // 修改时间
	ExpiryDate          string //
	Pending             string //
}

// eventeOpenRegimentColumns holds the columns for table evente_open_regiment.
var eventeOpenRegimentColumns = EventeOpenRegimentColumns{
	Id:                  "id",
	OrgId:               "org_id",
	RegimentId:          "regiment_id",
	UserId:              "user_id",
	ProductType:         "product_type",
	ProductId:           "product_id",
	GroupIncrementId:    "group_increment_id",
	SuccessStatus:       "success_status",
	RegimentStatus:      "regiment_status",
	OfferedNumber:       "offered_number",
	SuccessRegimentType: "success_regiment_type",
	RegimentNote:        "regiment_note",
	SuccessRegimentDate: "success_regiment_date",
	CreateDate:          "create_date",
	UpdateDate:          "update_date",
	ExpiryDate:          "expiry_date",
	Pending:             "pending",
}

// NewEventeOpenRegimentDao creates and returns a new DAO object for table data access.
func NewEventeOpenRegimentDao() *EventeOpenRegimentDao {
	return &EventeOpenRegimentDao{
		group:   "default",
		table:   "evente_open_regiment",
		columns: eventeOpenRegimentColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeOpenRegimentDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeOpenRegimentDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeOpenRegimentDao) Columns() EventeOpenRegimentColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeOpenRegimentDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeOpenRegimentDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeOpenRegimentDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
