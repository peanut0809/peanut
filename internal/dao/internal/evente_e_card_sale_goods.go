// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeECardSaleGoodsDao is the data access object for table evente_e_card_sale_goods.
type EventeECardSaleGoodsDao struct {
	table   string                      // table is the underlying table name of the DAO.
	group   string                      // group is the database configuration group name of current DAO.
	columns EventeECardSaleGoodsColumns // columns contains all the column names of Table for convenient usage.
}

// EventeECardSaleGoodsColumns defines and stores column names for table evente_e_card_sale_goods.
type EventeECardSaleGoodsColumns struct {
	Id          string // 自增id
	OrgId       string // 主办id
	UserId      string // 用户id
	IncrementId string // 订单id
	SaleId      string // sale_id
	CardId      string // E通卡id
	GoodsId     string // 商品id
	GiveNumber  string // 赠送数量
	UseNumber   string // 已使用数量
	CreateDate  string // 创建时间
	UpdateDate  string // 更新时间
}

// eventeECardSaleGoodsColumns holds the columns for table evente_e_card_sale_goods.
var eventeECardSaleGoodsColumns = EventeECardSaleGoodsColumns{
	Id:          "id",
	OrgId:       "org_id",
	UserId:      "user_id",
	IncrementId: "increment_id",
	SaleId:      "sale_id",
	CardId:      "card_id",
	GoodsId:     "goods_id",
	GiveNumber:  "give_number",
	UseNumber:   "use_number",
	CreateDate:  "create_date",
	UpdateDate:  "update_date",
}

// NewEventeECardSaleGoodsDao creates and returns a new DAO object for table data access.
func NewEventeECardSaleGoodsDao() *EventeECardSaleGoodsDao {
	return &EventeECardSaleGoodsDao{
		group:   "default",
		table:   "evente_e_card_sale_goods",
		columns: eventeECardSaleGoodsColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeECardSaleGoodsDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeECardSaleGoodsDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeECardSaleGoodsDao) Columns() EventeECardSaleGoodsColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeECardSaleGoodsDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeECardSaleGoodsDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeECardSaleGoodsDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
