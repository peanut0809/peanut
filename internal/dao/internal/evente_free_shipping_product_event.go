// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeFreeShippingProductEventDao is the data access object for table evente_free_shipping_product_event.
type EventeFreeShippingProductEventDao struct {
	table   string                                // table is the underlying table name of the DAO.
	group   string                                // group is the database configuration group name of current DAO.
	columns EventeFreeShippingProductEventColumns // columns contains all the column names of Table for convenient usage.
}

// EventeFreeShippingProductEventColumns defines and stores column names for table evente_free_shipping_product_event.
type EventeFreeShippingProductEventColumns struct {
	Id             string //
	OrgId          string // 主办id
	FreeShippingId string // 满包邮ID
	ProductId      string // 产品ID
	ScreeningsId   string // 场次ID
	PriceList      string // 票品列表集合（逗号分隔）
	Status         string // 状态（1.正常 2.已删除）
	CreateDate     string // 创建时间
	UpdateDate     string // 更时间
}

// eventeFreeShippingProductEventColumns holds the columns for table evente_free_shipping_product_event.
var eventeFreeShippingProductEventColumns = EventeFreeShippingProductEventColumns{
	Id:             "id",
	OrgId:          "org_id",
	FreeShippingId: "free_shipping_id",
	ProductId:      "product_id",
	ScreeningsId:   "screenings_id",
	PriceList:      "price_list",
	Status:         "status",
	CreateDate:     "create_date",
	UpdateDate:     "update_date",
}

// NewEventeFreeShippingProductEventDao creates and returns a new DAO object for table data access.
func NewEventeFreeShippingProductEventDao() *EventeFreeShippingProductEventDao {
	return &EventeFreeShippingProductEventDao{
		group:   "default",
		table:   "evente_free_shipping_product_event",
		columns: eventeFreeShippingProductEventColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeFreeShippingProductEventDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeFreeShippingProductEventDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeFreeShippingProductEventDao) Columns() EventeFreeShippingProductEventColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeFreeShippingProductEventDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeFreeShippingProductEventDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeFreeShippingProductEventDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
