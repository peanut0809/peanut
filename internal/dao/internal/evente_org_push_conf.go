// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeOrgPushConfDao is the data access object for table evente_org_push_conf.
type EventeOrgPushConfDao struct {
	table   string                   // table is the underlying table name of the DAO.
	group   string                   // group is the database configuration group name of current DAO.
	columns EventeOrgPushConfColumns // columns contains all the column names of Table for convenient usage.
}

// EventeOrgPushConfColumns defines and stores column names for table evente_org_push_conf.
type EventeOrgPushConfColumns struct {
	Id            string //
	OrgId         string // org_id
	MessageGroup  string // 消息分组
	MessageType   string // 消息推送场景
	WeixinPush    string // 主办公众号开关 1开 0 关
	EWeixinPush   string // 活动易公众号开关 1开 0 关
	WeixinAppPush string // 小程序开关 1开 0 关
	SmsPush       string // 开关 1开 0 关
	EmailPush     string // 开关 1开 0 关
	CreateDate    string // 新增时间
	UpdateDate    string // 更新时间
	DeleteDate    string // 删除时间
}

// eventeOrgPushConfColumns holds the columns for table evente_org_push_conf.
var eventeOrgPushConfColumns = EventeOrgPushConfColumns{
	Id:            "id",
	OrgId:         "org_id",
	MessageGroup:  "message_group",
	MessageType:   "message_type",
	WeixinPush:    "weixin_push",
	EWeixinPush:   "e_weixin_push",
	WeixinAppPush: "weixin_app_push",
	SmsPush:       "sms_push",
	EmailPush:     "email_push",
	CreateDate:    "create_date",
	UpdateDate:    "update_date",
	DeleteDate:    "delete_date",
}

// NewEventeOrgPushConfDao creates and returns a new DAO object for table data access.
func NewEventeOrgPushConfDao() *EventeOrgPushConfDao {
	return &EventeOrgPushConfDao{
		group:   "default",
		table:   "evente_org_push_conf",
		columns: eventeOrgPushConfColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeOrgPushConfDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeOrgPushConfDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeOrgPushConfDao) Columns() EventeOrgPushConfColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeOrgPushConfDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeOrgPushConfDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeOrgPushConfDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
