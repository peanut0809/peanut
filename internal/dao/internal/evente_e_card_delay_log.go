// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeECardDelayLogDao is the data access object for table evente_e_card_delay_log.
type EventeECardDelayLogDao struct {
	table   string                     // table is the underlying table name of the DAO.
	group   string                     // group is the database configuration group name of current DAO.
	columns EventeECardDelayLogColumns // columns contains all the column names of Table for convenient usage.
}

// EventeECardDelayLogColumns defines and stores column names for table evente_e_card_delay_log.
type EventeECardDelayLogColumns struct {
	Id         string // 自增id
	OrgId      string // 主办id
	ChildId    string // 子账号id
	CardId     string // E通卡id
	UserId     string // 用户id
	CardSaleId string // 销售id
	OrgName    string // 主办名称
	BeforeDate string // 延期之前时间
	ExpireDate string // 到期时间
	CreateDate string // 创建时间
}

// eventeECardDelayLogColumns holds the columns for table evente_e_card_delay_log.
var eventeECardDelayLogColumns = EventeECardDelayLogColumns{
	Id:         "id",
	OrgId:      "org_id",
	ChildId:    "child_id",
	CardId:     "card_id",
	UserId:     "user_id",
	CardSaleId: "card_sale_id",
	OrgName:    "org_name",
	BeforeDate: "before_date",
	ExpireDate: "expire_date",
	CreateDate: "create_date",
}

// NewEventeECardDelayLogDao creates and returns a new DAO object for table data access.
func NewEventeECardDelayLogDao() *EventeECardDelayLogDao {
	return &EventeECardDelayLogDao{
		group:   "default",
		table:   "evente_e_card_delay_log",
		columns: eventeECardDelayLogColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeECardDelayLogDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeECardDelayLogDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeECardDelayLogDao) Columns() EventeECardDelayLogColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeECardDelayLogDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeECardDelayLogDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeECardDelayLogDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
