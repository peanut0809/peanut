// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeSmallProgramReleaseDao is the data access object for table evente_small_program_release.
type EventeSmallProgramReleaseDao struct {
	table   string                           // table is the underlying table name of the DAO.
	group   string                           // group is the database configuration group name of current DAO.
	columns EventeSmallProgramReleaseColumns // columns contains all the column names of Table for convenient usage.
}

// EventeSmallProgramReleaseColumns defines and stores column names for table evente_small_program_release.
type EventeSmallProgramReleaseColumns struct {
	Id             string //
	OrgId          string // 主办ID
	AppId          string // app_id
	TemplateId     string // 代码库中的代码模版ID
	ExtJson        string // 提交审核代码的扩展内容json
	UserVersion    string // 当前提交版本
	UserDesc       string // 当前提交简介
	SubmitItemList string // 提交审核项的一个列表
	AuditId        string // 审核编号
	AuditStatus    string // 0为审核成功，1为审核失败，2为审核中
	Reason         string // 当status=1，审核被拒绝时，返回的拒绝原因
	ReleaseStatus  string // 发布状态 0为未发布，1为审核成功后发布成功
	AuditDate      string // 最后一次审核通知或查询时间
	ReleaseDate    string // 发布时间
	CreateDate     string // 新增时间
	UpdateDate     string // 更新时间
}

// eventeSmallProgramReleaseColumns holds the columns for table evente_small_program_release.
var eventeSmallProgramReleaseColumns = EventeSmallProgramReleaseColumns{
	Id:             "id",
	OrgId:          "org_id",
	AppId:          "app_id",
	TemplateId:     "template_id",
	ExtJson:        "ext_json",
	UserVersion:    "user_version",
	UserDesc:       "user_desc",
	SubmitItemList: "submit_item_list",
	AuditId:        "audit_id",
	AuditStatus:    "audit_status",
	Reason:         "reason",
	ReleaseStatus:  "release_status",
	AuditDate:      "audit_date",
	ReleaseDate:    "release_date",
	CreateDate:     "create_date",
	UpdateDate:     "update_date",
}

// NewEventeSmallProgramReleaseDao creates and returns a new DAO object for table data access.
func NewEventeSmallProgramReleaseDao() *EventeSmallProgramReleaseDao {
	return &EventeSmallProgramReleaseDao{
		group:   "default",
		table:   "evente_small_program_release",
		columns: eventeSmallProgramReleaseColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeSmallProgramReleaseDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeSmallProgramReleaseDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeSmallProgramReleaseDao) Columns() EventeSmallProgramReleaseColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeSmallProgramReleaseDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeSmallProgramReleaseDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeSmallProgramReleaseDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
