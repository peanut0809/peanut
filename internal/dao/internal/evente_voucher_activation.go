// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeVoucherActivationDao is the data access object for table evente_voucher_activation.
type EventeVoucherActivationDao struct {
	table   string                         // table is the underlying table name of the DAO.
	group   string                         // group is the database configuration group name of current DAO.
	columns EventeVoucherActivationColumns // columns contains all the column names of Table for convenient usage.
}

// EventeVoucherActivationColumns defines and stores column names for table evente_voucher_activation.
type EventeVoucherActivationColumns struct {
	Id                string // 自增id
	OrgId             string // 主办id
	VoucherCodeId     string // 优惠码 主表ID
	ActivationCode    string // 优惠码 号码
	VoucherCodeType   string // 优惠码类型 1:一人一码 2:通用吗
	ActivationType    string // 生成类型 1:系统生成 2:手动导入 3：手动输入
	ActivationDate    string // 使用 作废时间
	ActivationSubType string // 优惠码类型 nomer 普通  wh_card 文惠卡
	Status            string // 使用状态( 1:未使用  2 已使用  3 已作废)
	UnlockStatus      string // 解锁状态
	Remark            string // 备注
	CreateDate        string // 创建时间
	UpdateDate        string //
	InsertSalt        string // 插入盐
}

// eventeVoucherActivationColumns holds the columns for table evente_voucher_activation.
var eventeVoucherActivationColumns = EventeVoucherActivationColumns{
	Id:                "id",
	OrgId:             "org_id",
	VoucherCodeId:     "voucher_code_id",
	ActivationCode:    "activation_code",
	VoucherCodeType:   "voucher_code_type",
	ActivationType:    "activation_type",
	ActivationDate:    "activation_date",
	ActivationSubType: "activation_sub_type",
	Status:            "status",
	UnlockStatus:      "unlock_status",
	Remark:            "remark",
	CreateDate:        "create_date",
	UpdateDate:        "update_date",
	InsertSalt:        "insert_salt",
}

// NewEventeVoucherActivationDao creates and returns a new DAO object for table data access.
func NewEventeVoucherActivationDao() *EventeVoucherActivationDao {
	return &EventeVoucherActivationDao{
		group:   "default",
		table:   "evente_voucher_activation",
		columns: eventeVoucherActivationColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeVoucherActivationDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeVoucherActivationDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeVoucherActivationDao) Columns() EventeVoucherActivationColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeVoucherActivationDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeVoucherActivationDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeVoucherActivationDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
