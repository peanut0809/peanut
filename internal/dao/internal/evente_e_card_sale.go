// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeECardSaleDao is the data access object for table evente_e_card_sale.
type EventeECardSaleDao struct {
	table   string                 // table is the underlying table name of the DAO.
	group   string                 // group is the database configuration group name of current DAO.
	columns EventeECardSaleColumns // columns contains all the column names of Table for convenient usage.
}

// EventeECardSaleColumns defines and stores column names for table evente_e_card_sale.
type EventeECardSaleColumns struct {
	Id               string // 自增id
	OrgId            string // 主办id
	UserId           string // 用户id
	IncrementId      string // 订单id
	Price            string // 订单金额
	CardId           string // E通卡id
	Name             string //
	Mobile           string // 手机号
	IdCard           string // 身份证
	PhotoId          string // 照片
	BuyType          string // 购买方式 1直接购买 2 激活码激活
	StartDate        string // 开始时间
	ExpireDate       string // 到期时间
	BeforehandNum    string // 预约次数
	CardWriteStatus  string // 是否写卡 0 - 未写卡 1 - 已写卡
	CardWriteContent string // 年卡卡片写入内容
	CardWriteDate    string // 写卡时间
	CreateDate       string // 创建时间
	UpdateDate       string // 更新时间
	UsableTotal      string // 可预约总次数
	UseUp            string // 是否用完 1是 0 否
	InvalidDate      string // 卡用完时间
}

// eventeECardSaleColumns holds the columns for table evente_e_card_sale.
var eventeECardSaleColumns = EventeECardSaleColumns{
	Id:               "id",
	OrgId:            "org_id",
	UserId:           "user_id",
	IncrementId:      "increment_id",
	Price:            "price",
	CardId:           "card_id",
	Name:             "name",
	Mobile:           "mobile",
	IdCard:           "id_card",
	PhotoId:          "photo_id",
	BuyType:          "buy_type",
	StartDate:        "start_date",
	ExpireDate:       "expire_date",
	BeforehandNum:    "beforehand_num",
	CardWriteStatus:  "card_write_status",
	CardWriteContent: "card_write_content",
	CardWriteDate:    "card_write_date",
	CreateDate:       "create_date",
	UpdateDate:       "update_date",
	UsableTotal:      "usable_total",
	UseUp:            "use_up",
	InvalidDate:      "invalid_date",
}

// NewEventeECardSaleDao creates and returns a new DAO object for table data access.
func NewEventeECardSaleDao() *EventeECardSaleDao {
	return &EventeECardSaleDao{
		group:   "default",
		table:   "evente_e_card_sale",
		columns: eventeECardSaleColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeECardSaleDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeECardSaleDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeECardSaleDao) Columns() EventeECardSaleColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeECardSaleDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeECardSaleDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeECardSaleDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
