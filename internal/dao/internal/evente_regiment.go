// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeRegimentDao is the data access object for table evente_regiment.
type EventeRegimentDao struct {
	table   string                // table is the underlying table name of the DAO.
	group   string                // group is the database configuration group name of current DAO.
	columns EventeRegimentColumns // columns contains all the column names of Table for convenient usage.
}

// EventeRegimentColumns defines and stores column names for table evente_regiment.
type EventeRegimentColumns struct {
	Id              string // 主键id
	OrgId           string // 主办id
	Title           string // 名称
	RegimentType    string // 拼团类型 0 - 普通团 1 - 新人团 2 - 抽奖团
	StartDate       string // 开始时间
	EndDate         string // 结束时间
	RegimentPeople  string // 成团人数
	ExpiryDate      string // 有效期
	ProductId       string // 产品id
	ProductType     string // 产品类型 event - 活动 goods - 商品
	LimitNum        string // 单次购买上限
	OpenRegimentNum string // 开团次数
	JoinRegimentNum string // 参团次数
	RegimentStatus  string // 拼团状态 1 - 正常 0 - 关闭
	IsDel           string // 逻辑删除状态：默认 0 未删除  1 - 已删除
	CreateType      string // 创建类型 0 - h5 1 - 小程序
	CreateDate      string // 创建时间
	DeleteDate      string // 删除时间
	UpdateDate      string // 修改时间
	EndHandleStatus string // 活动结束处理状态 -1 有待支付 0 未处理 1 已处理
}

// eventeRegimentColumns holds the columns for table evente_regiment.
var eventeRegimentColumns = EventeRegimentColumns{
	Id:              "id",
	OrgId:           "org_id",
	Title:           "title",
	RegimentType:    "regiment_type",
	StartDate:       "start_date",
	EndDate:         "end_date",
	RegimentPeople:  "regiment_people",
	ExpiryDate:      "expiry_date",
	ProductId:       "product_id",
	ProductType:     "product_type",
	LimitNum:        "limit_num",
	OpenRegimentNum: "open_regiment_num",
	JoinRegimentNum: "join_regiment_num",
	RegimentStatus:  "regiment_status",
	IsDel:           "is_del",
	CreateType:      "create_type",
	CreateDate:      "create_date",
	DeleteDate:      "delete_date",
	UpdateDate:      "update_date",
	EndHandleStatus: "end_handle_status",
}

// NewEventeRegimentDao creates and returns a new DAO object for table data access.
func NewEventeRegimentDao() *EventeRegimentDao {
	return &EventeRegimentDao{
		group:   "default",
		table:   "evente_regiment",
		columns: eventeRegimentColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeRegimentDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeRegimentDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeRegimentDao) Columns() EventeRegimentColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeRegimentDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeRegimentDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeRegimentDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
