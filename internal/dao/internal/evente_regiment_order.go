// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeRegimentOrderDao is the data access object for table evente_regiment_order.
type EventeRegimentOrderDao struct {
	table   string                     // table is the underlying table name of the DAO.
	group   string                     // group is the database configuration group name of current DAO.
	columns EventeRegimentOrderColumns // columns contains all the column names of Table for convenient usage.
}

// EventeRegimentOrderColumns defines and stores column names for table evente_regiment_order.
type EventeRegimentOrderColumns struct {
	Id               string // 自增id
	OrgId            string // 主办id
	UserId           string // 用户id
	GroupIncrementId string // 团订单id
	IncrementId      string // 主订单id
	RegimentId       string // 团id
	OpenRegimentId   string // 开团id
	Name             string // 购买人名称
	Mobile           string // 手机号
	CountryCode      string // 国别
	OrderMoney       string // 订单总金额
	OrderNumber      string // 购买数量
	OrderState       string // 订单状态 10 待支付 20 已支付 30 已发货 40 已完成 50 订单超时 60 订单取消
	RefundState      string // 0无退款、1 处理中、2退款失败、3 已退款
	OrderType        string // 订单类型(event,goods)
	ProductId        string // 产品id
	ProductTitle     string // 产品名称
	PayWay           string // 支付方式(alipay 支付宝 weixin 微信  free免费订单)
	PayDate          string // 支付时间
	CreateDate       string // 创建时间
	UpdateDate       string // 更新时间
	JoinType         string //
}

// eventeRegimentOrderColumns holds the columns for table evente_regiment_order.
var eventeRegimentOrderColumns = EventeRegimentOrderColumns{
	Id:               "id",
	OrgId:            "org_id",
	UserId:           "user_id",
	GroupIncrementId: "group_increment_id",
	IncrementId:      "increment_id",
	RegimentId:       "regiment_id",
	OpenRegimentId:   "open_regiment_id",
	Name:             "name",
	Mobile:           "mobile",
	CountryCode:      "country_code",
	OrderMoney:       "order_money",
	OrderNumber:      "order_number",
	OrderState:       "order_state",
	RefundState:      "refund_state",
	OrderType:        "order_type",
	ProductId:        "product_id",
	ProductTitle:     "product_title",
	PayWay:           "pay_way",
	PayDate:          "pay_date",
	CreateDate:       "create_date",
	UpdateDate:       "update_date",
	JoinType:         "join_type",
}

// NewEventeRegimentOrderDao creates and returns a new DAO object for table data access.
func NewEventeRegimentOrderDao() *EventeRegimentOrderDao {
	return &EventeRegimentOrderDao{
		group:   "default",
		table:   "evente_regiment_order",
		columns: eventeRegimentOrderColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeRegimentOrderDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeRegimentOrderDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeRegimentOrderDao) Columns() EventeRegimentOrderColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeRegimentOrderDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeRegimentOrderDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeRegimentOrderDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
