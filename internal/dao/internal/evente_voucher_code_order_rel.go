// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeVoucherCodeOrderRelDao is the data access object for table evente_voucher_code_order_rel.
type EventeVoucherCodeOrderRelDao struct {
	table   string                           // table is the underlying table name of the DAO.
	group   string                           // group is the database configuration group name of current DAO.
	columns EventeVoucherCodeOrderRelColumns // columns contains all the column names of Table for convenient usage.
}

// EventeVoucherCodeOrderRelColumns defines and stores column names for table evente_voucher_code_order_rel.
type EventeVoucherCodeOrderRelColumns struct {
	Id                  string //
	OrgId               string //
	UserId              string // 用户id
	VoucherActivationId string // 优惠码明细ID
	VoucherCodeId       string // 主表ID
	IncrementId         string // 订单increment_id
	PayStatus           string // 支付状态 0 未支付， 1已支付 2 退款
	OrderMoney          string // 订单金额
	PayMoney            string // 支付金额
	VoucherCodeMoney    string // 优惠金额
	CreateDate          string // 新增时间
	UpdateDate          string // 更新时间
	ActivationCode      string // 优惠码
	UserType            string // 1新用户 2 老用户
	UserName            string //
	Mobile              string // 手机号
	CheckStatus         string // 核销状态 0 未核销 1 核销成功  2 核销失败
	CheckMesaage        string // 核销成功 失败原因
}

// eventeVoucherCodeOrderRelColumns holds the columns for table evente_voucher_code_order_rel.
var eventeVoucherCodeOrderRelColumns = EventeVoucherCodeOrderRelColumns{
	Id:                  "id",
	OrgId:               "org_id",
	UserId:              "user_id",
	VoucherActivationId: "voucher_activation_id",
	VoucherCodeId:       "voucher_code_id",
	IncrementId:         "increment_id",
	PayStatus:           "pay_status",
	OrderMoney:          "order_money",
	PayMoney:            "pay_money",
	VoucherCodeMoney:    "voucher_code_money",
	CreateDate:          "create_date",
	UpdateDate:          "update_date",
	ActivationCode:      "activation_code",
	UserType:            "user_type",
	UserName:            "user_name",
	Mobile:              "mobile",
	CheckStatus:         "check_status",
	CheckMesaage:        "check_mesaage",
}

// NewEventeVoucherCodeOrderRelDao creates and returns a new DAO object for table data access.
func NewEventeVoucherCodeOrderRelDao() *EventeVoucherCodeOrderRelDao {
	return &EventeVoucherCodeOrderRelDao{
		group:   "default",
		table:   "evente_voucher_code_order_rel",
		columns: eventeVoucherCodeOrderRelColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeVoucherCodeOrderRelDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeVoucherCodeOrderRelDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeVoucherCodeOrderRelDao) Columns() EventeVoucherCodeOrderRelColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeVoucherCodeOrderRelDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeVoucherCodeOrderRelDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeVoucherCodeOrderRelDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
