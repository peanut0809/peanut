// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeLimitDiscountDao is the data access object for table evente_limit_discount.
type EventeLimitDiscountDao struct {
	table   string                     // table is the underlying table name of the DAO.
	group   string                     // group is the database configuration group name of current DAO.
	columns EventeLimitDiscountColumns // columns contains all the column names of Table for convenient usage.
}

// EventeLimitDiscountColumns defines and stores column names for table evente_limit_discount.
type EventeLimitDiscountColumns struct {
	Id                string // 主键ID
	OrgId             string // 主办ID
	Name              string // 限时折扣名称
	DiscountPercent   string // 限时折扣比例
	DateSwithStatus   string // 日期重复开关  0 - 不启动 1 - 启动
	DateSwithContent  string // 日期重复json串
	MemberLevel       string // 会员级别
	FetchMemberLevel  string // 会员限制 逗号隔开
	FetchMemberSwitch string // 会员限制  0 - 无限制 1 - 限制
	StartDate         string // 开始时间
	EndDate           string // 结束时间
	OrderMoney        string // 下单金额
	Person            string // 参与人数
	PersonNumber      string // 参与人次
	PicUrl            string // 图片url
	WarmDate          string // 折扣预热时间
	DiscountLabel     string // 限时折扣 别名
	FavourableContent string // 下单可抵扣类型 1 - 余额 2 - 积分  逗号隔开
	PurchaseLimit     string // 限购数量
	CreateDate        string // 创建时间
	UpdateDate        string // 创建时间
}

// eventeLimitDiscountColumns holds the columns for table evente_limit_discount.
var eventeLimitDiscountColumns = EventeLimitDiscountColumns{
	Id:                "id",
	OrgId:             "org_id",
	Name:              "name",
	DiscountPercent:   "discount_percent",
	DateSwithStatus:   "date_swith_status",
	DateSwithContent:  "date_swith_content",
	MemberLevel:       "member_level",
	FetchMemberLevel:  "fetch_member_level",
	FetchMemberSwitch: "fetch_member_switch",
	StartDate:         "start_date",
	EndDate:           "end_date",
	OrderMoney:        "order_money",
	Person:            "person",
	PersonNumber:      "person_number",
	PicUrl:            "pic_url",
	WarmDate:          "warm_date",
	DiscountLabel:     "discount_label",
	FavourableContent: "favourable_content",
	PurchaseLimit:     "purchase_limit",
	CreateDate:        "create_date",
	UpdateDate:        "update_date",
}

// NewEventeLimitDiscountDao creates and returns a new DAO object for table data access.
func NewEventeLimitDiscountDao() *EventeLimitDiscountDao {
	return &EventeLimitDiscountDao{
		group:   "default",
		table:   "evente_limit_discount",
		columns: eventeLimitDiscountColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeLimitDiscountDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeLimitDiscountDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeLimitDiscountDao) Columns() EventeLimitDiscountColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeLimitDiscountDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeLimitDiscountDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeLimitDiscountDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
