// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeECardActivationExtendDao is the data access object for table evente_e_card_activation_extend.
type EventeECardActivationExtendDao struct {
	table   string                             // table is the underlying table name of the DAO.
	group   string                             // group is the database configuration group name of current DAO.
	columns EventeECardActivationExtendColumns // columns contains all the column names of Table for convenient usage.
}

// EventeECardActivationExtendColumns defines and stores column names for table evente_e_card_activation_extend.
type EventeECardActivationExtendColumns struct {
	Id             string // 自增id
	OrgId          string // 主办id
	UserId         string //
	UserName       string // 用户名
	ActivationId   string // E通卡激活码主表id
	ActivationCode string //
	ActivationDate string // 激活时间(创建时间)
	Status         string // 激活状态( 1: 未激活   2 已激活)
	IdCard         string // 身份证号
	Remark         string // 备注
	AdminName      string // 管理员名称
	CreateDate     string // 激活码创建时间
	UpdateDate     string //
	EndDate        string // 过期时间
	SendStatus     string // 发送状态 1 - 未发送 2 - 已发送
	UserMobile     string // 发送手机号
}

// eventeECardActivationExtendColumns holds the columns for table evente_e_card_activation_extend.
var eventeECardActivationExtendColumns = EventeECardActivationExtendColumns{
	Id:             "id",
	OrgId:          "org_id",
	UserId:         "user_id",
	UserName:       "user_name",
	ActivationId:   "activation_id",
	ActivationCode: "activation_code",
	ActivationDate: "activation_date",
	Status:         "status",
	IdCard:         "id_card",
	Remark:         "remark",
	AdminName:      "admin_name",
	CreateDate:     "create_date",
	UpdateDate:     "update_date",
	EndDate:        "end_date",
	SendStatus:     "send_status",
	UserMobile:     "user_mobile",
}

// NewEventeECardActivationExtendDao creates and returns a new DAO object for table data access.
func NewEventeECardActivationExtendDao() *EventeECardActivationExtendDao {
	return &EventeECardActivationExtendDao{
		group:   "default",
		table:   "evente_e_card_activation_extend",
		columns: eventeECardActivationExtendColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeECardActivationExtendDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeECardActivationExtendDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeECardActivationExtendDao) Columns() EventeECardActivationExtendColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeECardActivationExtendDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeECardActivationExtendDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeECardActivationExtendDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
