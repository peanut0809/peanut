// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeFreeShippingDao is the data access object for table evente_free_shipping.
type EventeFreeShippingDao struct {
	table   string                    // table is the underlying table name of the DAO.
	group   string                    // group is the database configuration group name of current DAO.
	columns EventeFreeShippingColumns // columns contains all the column names of Table for convenient usage.
}

// EventeFreeShippingColumns defines and stores column names for table evente_free_shipping.
type EventeFreeShippingColumns struct {
	Id               string //
	OrgId            string // 主办ID
	Title            string // 商品标题
	FreeShippingMode string // 包邮方式(1.满额包邮  2.满件包邮)
	FreeShippingType string // 包邮条件（1.按商品优惠前总价，计算包邮  2.按商品优惠后总价，计算包邮）
	StartDate        string // 开始时间
	EndDate          string // 结束时间
	Rule             string // 包邮地区规则
	CoverImg         string // 封面图ID
	ProductType      string // 产品类型（event 演出活动,goods 商品类型）
	IsCurrency       string // 是否夸商品优惠（1是 2.否）
	ProductList      string // 产品ID集合
	Status           string // 商品状态（1正常 2删除）
	CreateDate       string // 创建时间
	UpdateDate       string // 更新时间
}

// eventeFreeShippingColumns holds the columns for table evente_free_shipping.
var eventeFreeShippingColumns = EventeFreeShippingColumns{
	Id:               "id",
	OrgId:            "org_id",
	Title:            "title",
	FreeShippingMode: "free_shipping_mode",
	FreeShippingType: "free_shipping_type",
	StartDate:        "start_date",
	EndDate:          "end_date",
	Rule:             "rule",
	CoverImg:         "cover_img",
	ProductType:      "product_type",
	IsCurrency:       "is_currency",
	ProductList:      "product_list",
	Status:           "status",
	CreateDate:       "create_date",
	UpdateDate:       "update_date",
}

// NewEventeFreeShippingDao creates and returns a new DAO object for table data access.
func NewEventeFreeShippingDao() *EventeFreeShippingDao {
	return &EventeFreeShippingDao{
		group:   "default",
		table:   "evente_free_shipping",
		columns: eventeFreeShippingColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeFreeShippingDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeFreeShippingDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeFreeShippingDao) Columns() EventeFreeShippingColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeFreeShippingDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeFreeShippingDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeFreeShippingDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
