// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeLimitDiscountOrderDao is the data access object for table evente_limit_discount_order.
type EventeLimitDiscountOrderDao struct {
	table   string                          // table is the underlying table name of the DAO.
	group   string                          // group is the database configuration group name of current DAO.
	columns EventeLimitDiscountOrderColumns // columns contains all the column names of Table for convenient usage.
}

// EventeLimitDiscountOrderColumns defines and stores column names for table evente_limit_discount_order.
type EventeLimitDiscountOrderColumns struct {
	Id               string // 自增ID
	OrgId            string // 主办ID
	UserId           string // C端用户ID
	IncrementId      string // 订单ID
	DiscountId       string // 限时折扣id
	Name             string // 姓名
	Code             string // 手机区号
	Phone            string // 手机号
	ProductType      string // 产品类型 （event活动 goods商品)
	ProductId        string // 产品id
	ScreeningsId     string // 场次id,只在product_type=event 时有效
	OrderMoney       string // 下单金额
	UseLimitDiscount string // 商品折扣
	AmountPayable    string // (适用商品应付金额)
	Status           string // 订单状态: 20 已支付 60订单取消
	CreateDate       string // 创建时间
	UpdateDate       string // 修改时间
	BuyNumber        string //
}

// eventeLimitDiscountOrderColumns holds the columns for table evente_limit_discount_order.
var eventeLimitDiscountOrderColumns = EventeLimitDiscountOrderColumns{
	Id:               "id",
	OrgId:            "org_id",
	UserId:           "user_id",
	IncrementId:      "increment_id",
	DiscountId:       "discount_id",
	Name:             "name",
	Code:             "code",
	Phone:            "phone",
	ProductType:      "product_type",
	ProductId:        "product_id",
	ScreeningsId:     "screenings_id",
	OrderMoney:       "order_money",
	UseLimitDiscount: "use_limit_discount",
	AmountPayable:    "amount_payable",
	Status:           "status",
	CreateDate:       "create_date",
	UpdateDate:       "update_date",
	BuyNumber:        "buy_number",
}

// NewEventeLimitDiscountOrderDao creates and returns a new DAO object for table data access.
func NewEventeLimitDiscountOrderDao() *EventeLimitDiscountOrderDao {
	return &EventeLimitDiscountOrderDao{
		group:   "default",
		table:   "evente_limit_discount_order",
		columns: eventeLimitDiscountOrderColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeLimitDiscountOrderDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeLimitDiscountOrderDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeLimitDiscountOrderDao) Columns() EventeLimitDiscountOrderColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeLimitDiscountOrderDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeLimitDiscountOrderDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeLimitDiscountOrderDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
