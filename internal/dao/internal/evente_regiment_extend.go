// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// EventeRegimentExtendDao is the data access object for table evente_regiment_extend.
type EventeRegimentExtendDao struct {
	table   string                      // table is the underlying table name of the DAO.
	group   string                      // group is the database configuration group name of current DAO.
	columns EventeRegimentExtendColumns // columns contains all the column names of Table for convenient usage.
}

// EventeRegimentExtendColumns defines and stores column names for table evente_regiment_extend.
type EventeRegimentExtendColumns struct {
	Id               string // 主键id
	OrgId            string // 主办id
	RegimentId       string // 团id
	GroomStatus      string // 是否开启 推荐拼团 0 - 不开启 1- 开启
	WarmDate         string // 预热时间 小时
	InitJoinNum      string // 初始化参团人数
	SimulationStatus string // 是否开启 模拟开团 0 - 不开启 1- 开启
	Favourable       string // 参加优惠类型  1.积分 2.储值余额 3.优惠券
	CreateDate       string // 下单时间
	UpdateDate       string // 修改时间
}

// eventeRegimentExtendColumns holds the columns for table evente_regiment_extend.
var eventeRegimentExtendColumns = EventeRegimentExtendColumns{
	Id:               "id",
	OrgId:            "org_id",
	RegimentId:       "regiment_id",
	GroomStatus:      "groom_status",
	WarmDate:         "warm_date",
	InitJoinNum:      "init_join_num",
	SimulationStatus: "simulation_status",
	Favourable:       "favourable",
	CreateDate:       "create_date",
	UpdateDate:       "update_date",
}

// NewEventeRegimentExtendDao creates and returns a new DAO object for table data access.
func NewEventeRegimentExtendDao() *EventeRegimentExtendDao {
	return &EventeRegimentExtendDao{
		group:   "default",
		table:   "evente_regiment_extend",
		columns: eventeRegimentExtendColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EventeRegimentExtendDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *EventeRegimentExtendDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *EventeRegimentExtendDao) Columns() EventeRegimentExtendColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *EventeRegimentExtendDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EventeRegimentExtendDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EventeRegimentExtendDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
